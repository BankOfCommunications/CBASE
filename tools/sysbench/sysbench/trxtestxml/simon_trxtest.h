/*
 * Generated file - do not edit
 *
 * simon_trxtest.h
 *
 * This file was generated by SimonTool
 */

#ifndef SIMON_TRXTEST_H_
#define SIMON_TRXTEST_H_

#include "simonContext.h"

namespace simon {

class Simon_trxtestContextC : public SimonContextC {

 private:
  
    static Simon_trxtestContextC sTheInstance;

    static std::string sAppName;
    static SimonSigC sBlurbMessageSigs[];
    static SimonSigC sReportSigs[];
    static ustring sCompressedConfigFile;
    static uint64_t sTimeStamp;

    Simon_trxtestContextC() {}
    ~Simon_trxtestContextC() {}

 protected:

    // Returns the app name
    std::string getAppName() {
        return sAppName;
    }

    // Returns the BlurbMessage Signatures
    SimonSigC *getBlurbMessageSig() {
        return sBlurbMessageSigs;
    }

    // Returns the number of reports (size of the reports array)
    int getNumReports() {
        return 1;
    }

    // Returns the array of Report Signatures
    SimonSigC *getReportSigs() {
        return sReportSigs;
    }

    // Returns compressed config file
    ustring& getConfig() {
        return sCompressedConfigFile;
    }

    // Returns timestamp indicating when this file was generated 
    // (milliseconds since the epoch)
    uint64_t getTimeStamp() {
        return sTimeStamp;
    }

 public:

    static Simon_trxtestContextC &getInstance() {
        return sTheInstance;
    }

};



class  TrxTestPerHostBlurbC : public SimonBlurbC {


public:

    // Tag Accessors

    void setHostname(std::string value) {
        hostname = value;
    }

    std::string getHostname() {
        return hostname;
    }

    // Metric Accessors

    void incrRequestCount(uint32_t value) {
        requestCount = value;
    }

    uint32_t getRequestCount() {
        return requestCount;
    }

    void incrUpdateIntCount(uint32_t value) {
        updateIntCount = value;
    }

    uint32_t getUpdateIntCount() {
        return updateIntCount;
    }

    void incrUpdateStrCount(uint32_t value) {
        updateStrCount = value;
    }

    uint32_t getUpdateStrCount() {
        return updateStrCount;
    }

    void incrInsertCount(uint32_t value) {
        insertCount = value;
    }

    uint32_t getInsertCount() {
        return insertCount;
    }

    void incrDeleteCount(uint32_t value) {
        deleteCount = value;
    }

    uint32_t getDeleteCount() {
        return deleteCount;
    }

    void incrNewInsertCount(uint32_t value) {
        newInsertCount = value;
    }

    uint32_t getNewInsertCount() {
        return newInsertCount;
    }

    void incrSelectForUpdateCount(uint32_t value) {
        selectForUpdateCount = value;
    }

    uint32_t getSelectForUpdateCount() {
        return selectForUpdateCount;
    }

    void incrTrxCount(uint32_t value) {
        trxCount = value;
    }

    uint32_t getTrxCount() {
        return trxCount;
    }

    void setRequestLatency(uint32_t value) {
        requestLatency = value;
    }

    uint32_t getRequestLatency() {
        return requestLatency;
    }

    void setUpdateIntLatency(uint32_t value) {
        updateIntLatency = value;
    }

    uint32_t getUpdateIntLatency() {
        return updateIntLatency;
    }

    void setUpdateStrLatency(uint32_t value) {
        updateStrLatency = value;
    }

    uint32_t getUpdateStrLatency() {
        return updateStrLatency;
    }

    void setInsertLatency(uint32_t value) {
        insertLatency = value;
    }

    uint32_t getInsertLatency() {
        return insertLatency;
    }

    void setDeleteLatency(uint32_t value) {
        deleteLatency = value;
    }

    uint32_t getDeleteLatency() {
        return deleteLatency;
    }

    void setNewInsertLatency(uint32_t value) {
        newInsertLatency = value;
    }

    uint32_t getNewInsertLatency() {
        return newInsertLatency;
    }

    void setSelectForUpdateLatency(uint32_t value) {
        selectForUpdateLatency = value;
    }

    uint32_t getSelectForUpdateLatency() {
        return selectForUpdateLatency;
    }

    void setTrxLatency(uint32_t value) {
        trxLatency = value;
    }

    uint32_t getTrxLatency() {
        return trxLatency;
    }

    	
    TrxTestPerHostBlurbC() :
        requestCount(0),
        updateIntCount(0),
        updateStrCount(0),
        insertCount(0),
        deleteCount(0),
        newInsertCount(0),
        selectForUpdateCount(0),
        trxCount(0),
        requestLatency(0),
        updateIntLatency(0),
        updateStrLatency(0),
        insertLatency(0),
        deleteLatency(0),
        newInsertLatency(0),
        selectForUpdateLatency(0),
        trxLatency(0) {}
    ~TrxTestPerHostBlurbC() {}

    static void purgeAll() {
        SimonBlurbC::purgeAll(Simon_trxtestContextC::getInstance(), sBlurbCode);
    }

protected:

    SimonContextC &getContext() {
        return Simon_trxtestContextC::getInstance();
    }

    uint8_t getBlurbCode() {
        return sBlurbCode;
    }

    const char *getTagFormat() {
        return sTagFormat;
    }

    const char *getMetricFormat() {
        return sMetricFormat;
    }

    const size_t *getTagOffsets() {
        return sTagOffsets;
    }

    const size_t *getMetricOffsets() {
        return sMetricOffsets;
    }
    
private:

    // Tags
    std::string hostname;
    // Metrics
    uint32_t requestCount;
    uint32_t updateIntCount;
    uint32_t updateStrCount;
    uint32_t insertCount;
    uint32_t deleteCount;
    uint32_t newInsertCount;
    uint32_t selectForUpdateCount;
    uint32_t trxCount;
    uint32_t requestLatency;
    uint32_t updateIntLatency;
    uint32_t updateStrLatency;
    uint32_t insertLatency;
    uint32_t deleteLatency;
    uint32_t newInsertLatency;
    uint32_t selectForUpdateLatency;
    uint32_t trxLatency;
    

    static uint8_t sBlurbCode;

    static char *sTagFormat;
    static char *sMetricFormat;

    static size_t sTagOffsets[1];
    static size_t sMetricOffsets[16];

};



} // namespace

#endif /*SIMON_TRXTEST_H_*/
