/*
 * Generated file - do not edit
 *
 * simon_sysbench.h
 *
 * This file was generated by SimonTool
 */

#ifndef SIMON_SYSBENCH_H_
#define SIMON_SYSBENCH_H_

#include "simonContext.h"

namespace simon {

class Simon_sysbenchContextC : public SimonContextC {

 private:
  
    static Simon_sysbenchContextC sTheInstance;

    static std::string sAppName;
    static SimonSigC sBlurbMessageSigs[];
    static SimonSigC sReportSigs[];
    static ustring sCompressedConfigFile;
    static uint64_t sTimeStamp;

    Simon_sysbenchContextC() {}
    ~Simon_sysbenchContextC() {}

 protected:

    // Returns the app name
    std::string getAppName() {
        return sAppName;
    }

    // Returns the BlurbMessage Signatures
    SimonSigC *getBlurbMessageSig() {
        return sBlurbMessageSigs;
    }

    // Returns the number of reports (size of the reports array)
    int getNumReports() {
        return 1;
    }

    // Returns the array of Report Signatures
    SimonSigC *getReportSigs() {
        return sReportSigs;
    }

    // Returns compressed config file
    ustring& getConfig() {
        return sCompressedConfigFile;
    }

    // Returns timestamp indicating when this file was generated 
    // (milliseconds since the epoch)
    uint64_t getTimeStamp() {
        return sTimeStamp;
    }

 public:

    static Simon_sysbenchContextC &getInstance() {
        return sTheInstance;
    }

};



class  SysbenchPerHostBlurbC : public SimonBlurbC {


public:

    // Tag Accessors

    void setHostname(std::string value) {
        hostname = value;
    }

    std::string getHostname() {
        return hostname;
    }

    // Metric Accessors

    void incrRequestCount(uint32_t value) {
        requestCount = value;
    }

    uint32_t getRequestCount() {
        return requestCount;
    }

    void setRequestLatency(uint32_t value) {
        requestLatency = value;
    }

    uint32_t getRequestLatency() {
        return requestLatency;
    }

    void incrPrepareCount(uint32_t value) {
        prepareCount = value;
    }

    uint32_t getPrepareCount() {
        return prepareCount;
    }

    void setPrepareLatency(uint32_t value) {
        prepareLatency = value;
    }

    uint32_t getPrepareLatency() {
        return prepareLatency;
    }

    	
    SysbenchPerHostBlurbC() :
        requestCount(0),
        requestLatency(0),
        prepareCount(0),
        prepareLatency(0) {}
    ~SysbenchPerHostBlurbC() {}

    static void purgeAll() {
        SimonBlurbC::purgeAll(Simon_sysbenchContextC::getInstance(), sBlurbCode);
    }

protected:

    SimonContextC &getContext() {
        return Simon_sysbenchContextC::getInstance();
    }

    uint8_t getBlurbCode() {
        return sBlurbCode;
    }

    const char *getTagFormat() {
        return sTagFormat;
    }

    const char *getMetricFormat() {
        return sMetricFormat;
    }

    const size_t *getTagOffsets() {
        return sTagOffsets;
    }

    const size_t *getMetricOffsets() {
        return sMetricOffsets;
    }
    
private:

    // Tags
    std::string hostname;
    // Metrics
    uint32_t requestCount;
    uint32_t requestLatency;
    uint32_t prepareCount;
    uint32_t prepareLatency;
    

    static uint8_t sBlurbCode;

    static char *sTagFormat;
    static char *sMetricFormat;

    static size_t sTagOffsets[1];
    static size_t sMetricOffsets[4];

};



} // namespace

#endif /*SIMON_SYSBENCH_H_*/
