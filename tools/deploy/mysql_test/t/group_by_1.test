--disable_warnings
drop table if exists t1,t2,t3;
--enable_warnings
#--echo #
#--echo # Bug#27219: Aggregate functions in ORDER BY.  
# junyue: execute success, but if works well to be check
#--echo #
#SET @save_sql_mode=@@sql_mode;
#SET @@sql_mode='ONLY_FULL_GROUP_BY';
#
CREATE TABLE t1 (pk int primary key, a INT, b INT, c INT DEFAULT 0);
INSERT INTO t1 (pk,a, b) VALUES (1,3,3), (2,2,2), (3,3,3), (4,2,2), (5,3,3), (6,4,4);
#CREATE TABLE t2 SELECT * FROM t1;
#
SELECT 1 FROM t1 ORDER BY COUNT(*);
SELECT 1 FROM t1 ORDER BY COUNT(*) + 1;
#--error 1140
SELECT 1 FROM t1 ORDER BY COUNT(*) + a;
SELECT 1 FROM t1 ORDER BY COUNT(*), 1;
#--error 1140
SELECT 1 FROM t1 ORDER BY COUNT(*), a;

SELECT 1 FROM t1 ORDER BY SUM(a);
SELECT 1 FROM t1 ORDER BY SUM(a + 1);
SELECT 1 FROM t1 ORDER BY SUM(a) + 1;
#--error 1140
SELECT 1 FROM t1 ORDER BY SUM(a), b;

#--error 1140
SELECT a FROM t1 ORDER BY COUNT(b);

# ob does not support
#SELECT t1.a FROM t1 ORDER BY (SELECT SUM(t2.a) FROM t2);

# ob does not support
#--error 1140
#SELECT t1.a FROM t1 ORDER BY (SELECT SUM(t2.a), t2.a FROM t2);
#--error 1140
#SELECT t1.a FROM t1 ORDER BY (SELECT SUM(t2.a) FROM t2 ORDER BY t2.a);
#--error 1140
#SELECT t1.a FROM t1 ORDER BY (SELECT t2.a FROM t2 ORDER BY SUM(t2.b) LIMIT 1);

#--error 1140
#SELECT t1.a FROM t1
#  WHERE t1.a = (SELECT t2.a FROM t2 ORDER BY SUM(t2.b) LIMIT 1);
#--error 1140
#SELECT t1.a FROM t1 GROUP BY t1.a
#  HAVING t1.a = (SELECT t2.a FROM t2 ORDER BY SUM(t2.a) LIMIT 1);

#SELECT t1.a FROM t1 GROUP BY t1.a
#  HAVING t1.a IN (SELECT t2.a FROM t2 ORDER BY SUM(t1.b));
#--error 1140
#SELECT t1.a FROM t1 GROUP BY t1.a
#  HAVING t1.a IN (SELECT t2.a FROM t2 ORDER BY t2.a, SUM(t2.b));
#--error 1140
#SELECT t1.a FROM t1 GROUP BY t1.a
#  HAVING t1.a > ANY (SELECT t2.a FROM t2 ORDER BY t2.a, SUM(t2.b));

#--error 1140
#SELECT t1.a FROM t1
#  WHERE t1.a = (SELECT t2.a FROM t2 ORDER BY SUM(t1.b));

#SELECT 1 FROM t1 GROUP BY t1.a
#  HAVING (SELECT avg(SUM(t1.b) + 1) FROM t2 ORDER BY SUM(t2.a) LIMIT 1);
#SELECT 1 FROM t1 GROUP BY t1.a
#  HAVING (SELECT avg(SUM(t1.b) + t2.b) FROM t2 ORDER BY SUM(t2.a) LIMIT 1);
#SELECT 1 FROM t1 GROUP BY t1.a
#  HAVING (SELECT avg(t1.b + t2.b) FROM t2 ORDER BY SUM(t2.a) LIMIT 1);

#--error 1140
#SELECT 1 FROM t1 GROUP BY t1.a
#  HAVING (SELECT avg(SUM(t1.b) + 1) FROM t2 ORDER BY t2.a LIMIT 1);
#--error 1140
#SELECT 1 FROM t1 GROUP BY t1.a
#  HAVING (SELECT avg(SUM(t1.b) + t2.b) FROM t2 ORDER BY t2.a LIMIT 1);
#--error 1140
#SELECT 1 FROM t1 GROUP BY t1.a
#  HAVING (SELECT avg(t1.b + t2.b) FROM t2 ORDER BY t2.a LIMIT 1);

# Both SUMs are aggregated in the subquery, no mixture:
#SELECT t1.a FROM t1 
#  WHERE t1.a = (SELECT t2.a FROM t2 GROUP BY t2.a
#                  ORDER BY SUM(t2.b), SUM(t1.b) LIMIT 1);

# SUM(t1.b) is aggregated in the subquery, no mixture:
#SELECT t1.a, SUM(t1.b) FROM t1 
#  WHERE t1.a = (SELECT SUM(t2.b) FROM t2 GROUP BY t2.a
#                  ORDER BY SUM(t2.b), SUM(t1.b) LIMIT 1)
#  GROUP BY t1.a;

# 2nd SUM(t1.b) is aggregated in the subquery, no mixture:
#SELECT t1.a, SUM(t1.b) FROM t1 
#  WHERE t1.a = (SELECT SUM(t2.b) FROM t2
#                  ORDER BY SUM(t2.b) + SUM(t1.b) LIMIT 1)
#  GROUP BY t1.a;

# SUM(t2.b + t1.a) is aggregated in the subquery, no mixture:
#SELECT t1.a, SUM(t1.b) FROM t1 
#  WHERE t1.a = (SELECT SUM(t2.b) FROM t2
#                  ORDER BY SUM(t2.b + t1.a) LIMIT 1)
#  GROUP BY t1.a;

#SELECT t1.a FROM t1 GROUP BY t1.a
#    HAVING (1, 1) = (SELECT SUM(t1.a), t1.a FROM t2 LIMIT 1);

#select avg (
#  (select
#    (select sum(outr.a + innr.a) from t1 as innr limit 1) as tt
#   from t1 as outr order by outr.a limit 1))
#from t1 as most_outer;

#--error 1140
#select avg (
#  (select (
#    (select sum(outr.a + innr.a) from t1 as innr limit 1)) as tt
#   from t1 as outr order by count(outr.a) limit 1)) as tt
#from t1 as most_outer;

#select (select sum(outr.a + t1.a) from t1 limit 1) as tt from t1 as outr order by outr.a;

#SET sql_mode=@save_sql_mode;
DROP TABLE t1;

#--echo # 
#--echo # BUG#38072: Wrong result: HAVING not observed in a query with aggregate
#--echo # 
CREATE TABLE t1 (
  pk int,
  int_nokey int,
  int_key int,
  varchar_key varchar(1) NOT NULL,
  varchar_nokey varchar(1) NOT NULL,
  PRIMARY KEY (pk)
);
INSERT INTO t1 VALUES 
(1,5,5, 'h','h'),
(2,1,1, '{','{'),
(3,1,1, 'z','z'),
(4,8,8, 'x','x'),
(5,7,7, 'o','o'),
(6,3,3, 'p','p'),
(7,9,9, 'c','c'),
(8,0,0, 'k','k'),
(9,6,6, 't','t'),
(10,0,0,'c','c');
#
#explain SELECT COUNT(varchar_key) AS X FROM t1 WHERE pk = 8 having 'foo'='bar';
SELECT COUNT(varchar_key) AS X FROM t1 WHERE pk = 8 having 'foo'='bar';
drop table t1;
#  
#--echo End of 5.0 tests
## Bug #21174: Index degrades sort performance and 
##             optimizer does not honor IGNORE INDEX.
##             a.k.a WL3527.
## junyue: ob does not support
##
#CREATE TABLE t1 (a INT, b INT,
#                 PRIMARY KEY (a),
#                 KEY i2(a,b));
#INSERT INTO t1 VALUES (1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8);
#INSERT INTO t1 SELECT a + 8,b FROM t1;
#INSERT INTO t1 SELECT a + 16,b FROM t1;
#INSERT INTO t1 SELECT a + 32,b FROM t1;
#INSERT INTO t1 SELECT a + 64,b FROM t1;
#INSERT INTO t1 SELECT a + 128,b FROM t1 limit 16;
#ANALYZE TABLE t1;
#EXPLAIN SELECT a FROM t1 WHERE a < 2;
#EXPLAIN SELECT a FROM t1 WHERE a < 2 ORDER BY a;
#EXPLAIN SELECT a FROM t1 WHERE a < 2 GROUP BY a;
#EXPLAIN SELECT a FROM t1 IGNORE INDEX (PRIMARY,i2);
#EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR JOIN (PRIMARY,i2);
#EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR GROUP BY (PRIMARY,i2) GROUP BY a;
#EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY,i2) ORDER BY a;
#SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY,i2) ORDER BY a;
#EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY)
#  IGNORE INDEX FOR GROUP BY (i2) GROUP BY a;
#EXPLAIN SELECT a FROM t1 IGNORE INDEX (PRIMARY) IGNORE INDEX FOR ORDER BY (i2);
#EXPLAIN SELECT a FROM t1 FORCE INDEX (i2);
#EXPLAIN SELECT a FROM t1 USE INDEX ();
#EXPLAIN SELECT a FROM t1 USE INDEX () USE INDEX (i2);
#--error ER_WRONG_USAGE
#EXPLAIN SELECT a FROM t1 
#  FORCE INDEX (PRIMARY) 
#  IGNORE INDEX FOR GROUP BY (i2)
#  IGNORE INDEX FOR ORDER BY (i2)
#  USE INDEX (i2);
#EXPLAIN SELECT a FROM t1 USE INDEX (i2) USE INDEX ();
#--error ER_PARSE_ERROR
#EXPLAIN SELECT a FROM t1 FORCE INDEX ();
#--error ER_PARSE_ERROR
#EXPLAIN SELECT a FROM t1 IGNORE INDEX ();
## disable the columns irrelevant to this test here. On some systems 
## without support for large files the rowid is shorter and its size affects 
## the cost calculations. This causes the optimizer to choose loose index
## scan over normal index access.
#--replace_column 4 # 7 # 9 # 10 #
#EXPLAIN SELECT a FROM t1 USE INDEX FOR JOIN (i2) 
#  USE INDEX FOR GROUP BY (i2) GROUP BY a;
#EXPLAIN SELECT a FROM t1 FORCE INDEX FOR JOIN (i2) 
#  FORCE INDEX FOR GROUP BY (i2) GROUP BY a;
#EXPLAIN SELECT a FROM t1 USE INDEX () IGNORE INDEX (i2);
#EXPLAIN SELECT a FROM t1 IGNORE INDEX (i2) USE INDEX ();
#
#EXPLAIN SELECT a FROM t1 
#  USE INDEX FOR GROUP BY (i2) 
#  USE INDEX FOR ORDER BY (i2)
#  USE INDEX FOR JOIN (i2);
#
#EXPLAIN SELECT a FROM t1 
#  USE INDEX FOR JOIN (i2) 
#  USE INDEX FOR JOIN (i2) 
#  USE INDEX FOR JOIN (i2,i2);
#
#EXPLAIN SELECT 1 FROM t1 WHERE a IN
#  (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2));
#
#CREATE TABLE t2 (a INT, b INT, KEY(a));
#INSERT INTO t2 VALUES (1, 1), (2, 2), (3,3), (4,4);
#EXPLAIN SELECT a, SUM(b) FROM t2 GROUP BY a LIMIT 2; 
#EXPLAIN SELECT a, SUM(b) FROM t2 IGNORE INDEX (a) GROUP BY a LIMIT 2;
#
#EXPLAIN SELECT 1 FROM t2 WHERE a IN
#  (SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2));
#
#SHOW VARIABLES LIKE 'old';  
#--error ER_INCORRECT_GLOBAL_LOCAL_VAR
#SET @@old = off;  
#
#DROP TABLE t1, t2;
#
##
## Bug#30596: GROUP BY optimization gives wrong result order
## junyue: ob does not support
##
#CREATE TABLE t1(
#  a INT, 
#  b INT NOT NULL, 
#  c INT NOT NULL, 
#  d INT, 
#  UNIQUE KEY (c,b)
#);
#
#INSERT INTO t1 VALUES (1,1,1,50), (1,2,3,40), (2,1,3,4);
#
#CREATE TABLE t2(
#  a INT,
#  b INT,
#  UNIQUE KEY(a,b)
#);
#
#INSERT INTO t2 VALUES (NULL, NULL), (NULL, NULL), (NULL, 1), (1, NULL), (1, 1), (1,2);
#
#EXPLAIN SELECT c,b,d FROM t1 GROUP BY c,b,d;
#SELECT c,b,d FROM t1 GROUP BY c,b,d;
#EXPLAIN SELECT c,b,d FROM t1 GROUP BY c,b,d ORDER BY NULL;
#SELECT c,b,d FROM t1 GROUP BY c,b,d ORDER BY NULL;
#EXPLAIN SELECT c,b,d FROM t1 ORDER BY c,b,d;
#SELECT c,b,d FROM t1 ORDER BY c,b,d;
#
#EXPLAIN SELECT c,b,d FROM t1 GROUP BY c,b;
#SELECT c,b,d FROM t1 GROUP BY c,b;
#EXPLAIN SELECT c,b   FROM t1 GROUP BY c,b;
#SELECT c,b   FROM t1 GROUP BY c,b;
#
#EXPLAIN SELECT a,b from t2 ORDER BY a,b;
#SELECT a,b from t2 ORDER BY a,b;
#EXPLAIN SELECT a,b from t2 GROUP BY a,b;
#SELECT a,b from t2 GROUP BY a,b;
#EXPLAIN SELECT a from t2 GROUP BY a;
#SELECT a from t2 GROUP BY a;
#EXPLAIN SELECT b from t2 GROUP BY b;
#SELECT b from t2 GROUP BY b;
#
#DROP TABLE t1;
#DROP TABLE t2;
#
##
## Bug #31797: error while parsing subqueries -- WHERE is parsed as HAVING
## junyue: ob does not support
##
#CREATE TABLE t1 ( a INT, b INT );
#
#SELECT b c, (SELECT a FROM t1 WHERE b = c)
#FROM t1;
#
#SELECT b c, (SELECT a FROM t1 WHERE b = c)
#FROM t1 
#HAVING b = 10;
#
#--error ER_ILLEGAL_REFERENCE
#SELECT max(b) c, (SELECT a FROM t1 WHERE b = c)
#FROM t1 
#HAVING b = 10;
#
#SET @old_sql_mode = @@sql_mode;
#SET @@sql_mode='ONLY_FULL_GROUP_BY';
#
#SELECT b c, (SELECT a FROM t1 WHERE b = c)
#FROM t1;
#
#--error ER_NON_GROUPING_FIELD_USED
#SELECT b c, (SELECT a FROM t1 WHERE b = c)
#FROM t1 
#HAVING b = 10;
#
#--error ER_ILLEGAL_REFERENCE
#SELECT max(b) c, (SELECT a FROM t1 WHERE b = c)
#FROM t1 
#HAVING b = 10;
#
#INSERT INTO t1 VALUES (1, 1);
#SELECT b c, (SELECT a FROM t1 WHERE b = c)
#FROM t1;
#
#INSERT INTO t1 VALUES (2, 1);
#--error ER_SUBQUERY_NO_1_ROW
#SELECT b c, (SELECT a FROM t1 WHERE b = c)
#FROM t1;
#
#DROP TABLE t1;
#SET @@sql_mode = @old_sql_mode;
#
#
##
## Bug#42567 Invalid GROUP BY error
##
#
## Setup of the subtest
#SET @old_sql_mode = @@sql_mode;
#SET @@sql_mode='ONLY_FULL_GROUP_BY';
#
#CREATE TABLE t1(i INT);
#INSERT INTO t1 VALUES (1), (10);
#
## The actual test
#SELECT COUNT(i) FROM t1;
#SELECT COUNT(i) FROM t1 WHERE i > 1;
#
## Cleanup of subtest
#DROP TABLE t1;
#SET @@sql_mode = @old_sql_mode;
#
#--echo #
#--echo # Bug #45640: optimizer bug produces wrong results
#--echo #
#
#CREATE TABLE t1 (a INT, b INT);
#INSERT INTO t1 VALUES (4, 40), (1, 10), (2, 20), (2, 20), (3, 30);
#
#--echo # should return 4 ordered records:
#SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa;
#
#SELECT (SELECT (SELECT t1.a)) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa;
#
#SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa+0;
#
#--echo # should return the same result in a reverse order:
#SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY -aa;
#
#--echo # execution plan should not use temporary table:
#EXPLAIN EXTENDED
#SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY aa+0;
#
#EXPLAIN EXTENDED
#SELECT (SELECT t1.a) aa, COUNT(DISTINCT b) FROM t1 GROUP BY -aa;
#
#--echo # should return only one record
#SELECT (SELECT tt.a FROM t1 tt LIMIT 1) aa, COUNT(DISTINCT b) FROM t1
#  GROUP BY aa;
#
#CREATE TABLE t2 SELECT DISTINCT a FROM t1;
#
#--echo # originally reported queries (1st two columns of next two query
#--echo # results should be same):
#
#SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(DISTINCT b)
#  FROM t1 GROUP BY aa, b;
#SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(         b)
#  FROM t1 GROUP BY aa, b;
#
#--echo # ORDER BY for sure:
#
#SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(DISTINCT b)
#  FROM t1 GROUP BY aa, b ORDER BY -aa, -b;
#SELECT (SELECT t2.a FROM t2 WHERE t2.a = t1.a) aa, b, COUNT(         b)
#  FROM t1 GROUP BY aa, b ORDER BY -aa, -b;
#
#DROP TABLE t1, t2;
#
#
#--echo #
#--echo # Bug#52051: Aggregate functions incorrectly returns NULL from outer
#--echo # join query
#--echo #
#CREATE TABLE t1 (a INT PRIMARY KEY);
#CREATE TABLE t2 (a INT PRIMARY KEY);
#INSERT INTO t2 VALUES (1), (2);
#EXPLAIN SELECT min(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
#SELECT min(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
#EXPLAIN SELECT max(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
#SELECT max(t2.a) FROM t2 LEFT JOIN t1 ON t2.a = t1.a;
#DROP TABLE t1, t2;
#
#
#--echo #
#--echo # Bug#55188: GROUP BY, GROUP_CONCAT and TEXT - inconsistent results
## junyue: does not support
#--echo #
#
#CREATE TABLE t1 (a text, b varchar(10));
#INSERT INTO t1 VALUES (repeat('1', 1300),'one'), (repeat('1', 1300),'two');
#
#query_vertical EXPLAIN 
#SELECT SUBSTRING(a,1,10), LENGTH(a), GROUP_CONCAT(b) FROM t1 GROUP BY a;
#SELECT SUBSTRING(a,1,10), LENGTH(a), GROUP_CONCAT(b) FROM t1 GROUP BY a;
#query_vertical EXPLAIN 
#SELECT SUBSTRING(a,1,10), LENGTH(a) FROM t1 GROUP BY a;
#SELECT SUBSTRING(a,1,10), LENGTH(a) FROM t1 GROUP BY a;
#DROP TABLE t1;
#
#--echo #
#--echo # Bug#57688 Assertion `!table || (!table->write_set || bitmap_is_set(table->write_set, field
#--echo # junyue: single field
#
#CREATE TABLE t1(f1 INT NOT NULL);
#INSERT INTO t1 VALUES (16777214),(0);
#
#SELECT COUNT(*) FROM t1 LEFT JOIN t1 t2
#ON 1 WHERE t2.f1 > 1 GROUP BY t2.f1;
#
#DROP TABLE t1;
#
#--echo #
#--echo # Bug#59839: Aggregation followed by subquery yields wrong result
## junyue: does not support
#--echo #
#
#CREATE TABLE t1 (
#  a INT,
#  b INT,
#  c INT,
#  KEY (a, b)
#);
#
#INSERT INTO t1 VALUES
#  ( 1, 1,  1 ),
#  ( 1, 2,  2 ),
#  ( 1, 3,  3 ),
#  ( 1, 4,  6 ),
#  ( 1, 5,  5 ),
#  ( 1, 9, 13 ),
#
#  ( 2, 1,  6 ),
#  ( 2, 2,  7 ),
#  ( 2, 3,  8 );
#
#EXPLAIN
#SELECT a, avg(t1.b),
#(SELECT t11.c FROM t1 t11 WHERE t11.a = t1.a AND t11.b = avg(t1.b)) AS t11c,
#(SELECT t12.c FROM t1 t12 WHERE t12.a = t1.a AND t12.b = avg(t1.b)) AS t12c
#FROM t1 GROUP BY a;
#
#SELECT a, avg(t1.b),
#(SELECT t11.c FROM t1 t11 WHERE t11.a = t1.a AND t11.b = avg(t1.b)) AS t11c,
#(SELECT t12.c FROM t1 t12 WHERE t12.a = t1.a AND t12.b = avg(t1.b)) AS t12c
#FROM t1 GROUP BY a;
#
#DROP TABLE t1;
#
#--echo #
#--echo # Bug#11765254 (58200): Assertion failed: param.sort_length when grouping
#--echo # by functions
#--echo #
#
#SET SQL_BIG_TABLES=1;
#CREATE TABLE t1(a INT);
#INSERT INTO t1 VALUES (0),(0);
#SELECT 1 FROM t1 GROUP BY IF(`a`,'','');
#SELECT 1 FROM t1 GROUP BY TRIM(LEADING RAND() FROM '');
#SELECT 1 FROM t1 GROUP BY SUBSTRING('',SLEEP(0),'');
#SELECT 1 FROM t1 GROUP BY SUBSTRING(SYSDATE() FROM 'K' FOR 'jxW<');
#DROP TABLE t1;
#SET SQL_BIG_TABLES=0;
#
#--echo # End of 5.1 tests
#
#--echo #
#--echo # Bug#49771: Incorrect min ( datetime) when minimum value is 0000-00-00
#--echo #
#CREATE TABLE t1 (f1 int, f2 DATETIME);
#
#INSERT INTO t1 VALUES (1,'2004-04-19'), (1,'0000-00-00'), (1,'2004-04-18'),
#(2,'2004-05-19'), (2,'0001-01-01'), (3,'2004-04-10');
#
#SELECT min(f2),max(f2) FROM t1;
#SELECT f1,min(f2),max(f2) FROM t1 GROUP BY 1;
#
#DROP TABLE t1;
#
#CREATE TABLE t1 ( f1 int, f2 time);
#INSERT INTO t1 VALUES (1,'01:27:35'), (1,'06:11:01'), (2,'19:53:05'),
#(2,'21:44:25'), (3,'10:55:12'), (3,'05:45:11'), (4,'00:25:00');
#
#SELECT min(f2),max(f2) FROM t1;
#SELECT f1,min(f2),max(f2) FROM t1 GROUP BY 1;
#
#DROP TABLE t1;
#--echo #End of test#49771
